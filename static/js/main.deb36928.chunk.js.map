{"version":3,"sources":["components/UX-Button/UXButton.jsx","components/UX-Table/UXTable.jsx","components/UX-Loader/UXLoader.jsx","components/UX-TextBox/UXTextBox.jsx","components/UX-Select/UXSelect.jsx","components/UX-TextArea/UXTextArea.jsx","components/UX-Form/UXForm.jsx","widgets/addItemWidget/addItem.jsx","assets/Images/ShopBridge.png","widgets/adminDashboardWidget/adminDashboard.jsx","components/UX-NotFound/NotFound.jsx","App.js","reportWebVitals.js","index.js"],"names":["UXButton","props","id","type","className","class","onClick","onTap","disabled","value","UXTable","Table","responsive","bordered","striped","hover","tableHeader","length","map","thItem","k","tableBody","trItem","src","image","alt","title","description","price","onEdit","onDelete","UXLoader","fullPageOverlay","UXTextBox","name","placeholder","placeHolder","onChange","e","onEnter","UXSelect","onSelect","multiple","optionArray","option","prototype","PropTypes","isRequired","string","array","bool","func","UXTextArea","rows","cols","UXForm","inputArray","controlArray","formHeading","preFilledData","useState","formData","updateFormData","useEffect","setInitialData","checkPreFilledData","filledName","preFilledValue","toString","toLowerCase","mode","initFormData","forEach","inputArrayElement","validationSchema","validation","schema","errorMsg","handleChange","prevFormData","target","reStructureFormData","newFormDataObj","Object","keys","key","validateForm","form","submittedData","invalidCount","formElement","push","test","input","Row","Col","md","sm","control","onSubmit","onCancel","configData","AddItem","isLoading","setLoader","successMsg","setSuccessMsg","error","setError","addNewProduct","payload","axios","post","then","res","handleSuccess","catch","err","handleErr","finally","updateProduct","put","iteminfo","setTimeout","onHide","message","Modal","size","aria-labelledby","centered","Header","Title","Body","addItemInputArray","itemData","submitType","React","memo","mockData","productData","AdminDashboard","modalshow","toogleModalShow","operationType","setOperationType","setProductData","itemInfo","setItemInfo","fetchErr","setFetchErr","deleteStatus","setDelStatus","getProductData","get","data","handleOpenModal","modalCancel","logo","handleEditItem","productID","delete","show","onConfirm","NotFound","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.deb36928.chunk.js","sourcesContent":["import React from 'react';\r\nimport './UXButton.scss';\r\nconst UXButton = (props) => {\r\n    return (\r\n        <button\r\n            id={props.id && props.id}\r\n            type={props.type && props.type}\r\n            className={`btn ${props.class ? props.class : ''}`}\r\n            onClick={props.onTap && props.onTap}\r\n            disabled={props.disabled && props.disabled}\r\n        >\r\n            {props.value && props.value}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default UXButton;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport UXButton from '../UX-Button/UXButton';\r\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\r\nimport './UXTable.scss';\r\n\r\nconst UXTable = props => {\r\n    return (\r\n        <div>\r\n            <Table responsive bordered striped hover>\r\n                <thead>\r\n                    <tr className='toCenter'>\r\n                        {\r\n                            props.tableHeader.length > 0 && props.tableHeader.map((thItem, k) => (\r\n                                <th key={k}>{thItem}</th>\r\n                            ))\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.tableBody.length > 0 && props.tableBody.map((trItem, k) => (\r\n                            <tr key={k}>\r\n                                <td id='tdImg' className='toMiddle'><img src={trItem.image} alt='img' className='thumbnail'></img></td>\r\n                                <td id='tdTitle'>{trItem.title}</td>\r\n                                <td id='tdDescription'>{trItem.description}</td>\r\n                                <td id='tdPrice' className='toMiddle'>{trItem.price}</td>\r\n                                <td className='toMiddle' id='tdAction'>\r\n                                    <p>\r\n                                        <FaEdit className='actionIcon toMiddle' onClick={() => props.onEdit(trItem)} />\r\n                                        <UXButton type='button' class='btn btn-primary adminDashboardBtn2' onTap={() => props.onEdit(trItem)} value='Edit'></UXButton>\r\n                                    </p>\r\n                                    <p>\r\n                                        <FaTrashAlt className='actionIcon' />\r\n                                        <UXButton type='button' class='btn btn-danger adminDashboardBtn2' value='Delete' onTap={() => props.onDelete(trItem.id)}></UXButton>\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nUXTable.propTypes = {\r\n    //list of heading, should be an array\r\n    tableHeader: PropTypes.array.isRequired,\r\n\r\n    //array of object. table data\r\n    tableBody: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default UXTable;","import React from 'react';\r\nimport './UXLoader.scss';\r\nconst UXLoader = props => {\r\n    return (\r\n        <div className={props.fullPageOverlay ? 'fullPageOverlay' : null}>\r\n            <div className='loaderWrapper'>\r\n                <div className='loader'></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UXLoader;","import React from 'react';\r\nimport './UXTextBox.scss';\r\n\r\nconst UXTextBox = (props) => {\r\n    return (\r\n        <input\r\n            id={props.id && props.id}\r\n            name={props.name && props.name}\r\n            type={props.type && props.type}\r\n            value={props.value && props.value}\r\n            placeholder={props.placeHolder && props.placeHolder}\r\n            className={`form-control ${props.class ? props.class : ''}`}\r\n            onChange={(e) => props.onEnter(e)}\r\n            disabled={props.disabled && props.disabled}\r\n        >\r\n        </input>\r\n    );\r\n};\r\n\r\nexport default UXTextBox;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UXSelect = (props) => {\r\n    return (\r\n        <select\r\n            id={props.id && props.id}\r\n            name={props.name && props.name}\r\n            value={props.value && props.value}\r\n            className={`form-control ${props.class ? props.class : ''}`}\r\n            onChange={(e) => props.onSelect(e)}\r\n            disabled={props.disabled && props.disabled}\r\n            multiple={props.multiple && props.multiple}\r\n        >\r\n            <option value=''> --- Select ---</option>\r\n            {props.optionArray.length > 0 && props.optionArray.map((option, k) => (\r\n                <option key={k} value={option.value}>{option.name}</option>\r\n            ))}\r\n        </select>\r\n    );\r\n};\r\n\r\nUXSelect.prototype = {\r\n    //ID require field\r\n    id: PropTypes.isRequired,\r\n\r\n    //Name require field\r\n    name: PropTypes.string.isRequired,\r\n\r\n    //object of array. First value should be filed name and second value should be input value\r\n    optionArray: PropTypes.array.isRequired,\r\n\r\n    //disable flag       \r\n    disabled: PropTypes.bool,\r\n\r\n    //function for select value \r\n    onSelect: PropTypes.func,\r\n\r\n    //multiple flag\r\n    multiple: PropTypes.bool\r\n}\r\nexport default UXSelect;","import React from 'react';\r\nimport './UXTextArea.scss';\r\n\r\nconst UXTextArea = (props) => {\r\n    return (\r\n        <textarea\r\n            id={props.id && props.id}\r\n            name={props.name && props.name}\r\n            rows={props.rows} \r\n            cols={props.cols}\r\n            value={props.value && props.value}\r\n            placeholder={props.placeHolder && props.placeHolder}\r\n            className={`form-control ${props.class ? props.class : ''}`}\r\n            onChange={(e) => props.onEnter(e)}\r\n            disabled={props.disabled && props.disabled}\r\n        >\r\n        </textarea>\r\n    );\r\n};\r\n\r\nexport default UXTextArea;","import React, { useEffect, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport UXTextBox from '../UX-TextBox/UXTextBox';\r\nimport UXButton from '../UX-Button/UXButton';\r\nimport UXSelect from '../UX-Select/UXSelect';\r\nimport UXTextArea from '../UX-TextArea/UXTextArea';\r\nimport './UXForm.scss';\r\n\r\nconst UXForm = props => {\r\n    const { inputArray, controlArray, formHeading, preFilledData } = props;\r\n    const [formData, updateFormData] = useState({});\r\n\r\n    useEffect(() => {\r\n        setInitialData('new');\r\n    }, []);\r\n    const checkPreFilledData = (filledName) => {\r\n        let preFilledValue = preFilledData && preFilledData[filledName.toString().toLowerCase()];\r\n        if (preFilledValue) {\r\n            return preFilledValue;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    const setInitialData = (mode) => {\r\n        let initFormData = {};\r\n        if (inputArray && inputArray.length > 0) {\r\n            inputArray.forEach(inputArrayElement => {\r\n                initFormData[inputArrayElement.name] = {\r\n                    value: mode !== 'reset' ? checkPreFilledData(inputArrayElement.name) : '',\r\n                    validationSchema: inputArrayElement.validation.schema,\r\n                    errorMsg: []\r\n                }\r\n            })\r\n        }\r\n        updateFormData(initFormData);\r\n    }\r\n    const handleChange = (e, schema) => {\r\n        updateFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            [e.target.name]: {\r\n                value: e.target.value,\r\n                validationSchema: schema,\r\n                errorMsg: []\r\n            }\r\n        }))\r\n    };\r\n    const formReset = () => {\r\n        setInitialData('reset');\r\n        props.onCancel();\r\n    };\r\n    const handleFormSubmit = () => {\r\n        if (validateForm(formData) === 0) {\r\n            props.onSubmit(reStructureFormData(formData));\r\n        }\r\n    };\r\n    const reStructureFormData = (formData) => {\r\n        let newFormDataObj = {};\r\n        Object.keys(formData).forEach(key => {\r\n            newFormDataObj[key] = formData[key].value;\r\n        });\r\n        return newFormDataObj;\r\n    }\r\n    const validateForm = (form) => {\r\n        let submittedData = form;\r\n        let invalidCount = 0;\r\n        Object.keys(submittedData).forEach(formElement => {\r\n            submittedData[formElement].validationSchema.forEach(schema => {\r\n                switch (schema) {\r\n                    case 'required':\r\n                        if (submittedData[formElement] && submittedData[formElement].value === '') {\r\n                            submittedData[formElement].errorMsg.push('Please enter value');\r\n                            invalidCount++;\r\n                        }\r\n                        break;\r\n                    case 'isString':\r\n                        if (typeof submittedData[formElement].value !== 'string') {\r\n                            submittedData[formElement].errorMsg.push('Please string value');\r\n                            invalidCount++;\r\n                        }\r\n                        break;\r\n                    case 'isNumber':\r\n                        let numberReg = /\\d+(\\.\\d{1,2})?/;\r\n                        if (!numberReg.test(submittedData[formElement].value)) {\r\n                            submittedData[formElement].errorMsg.push('Please number value');\r\n                            invalidCount++;\r\n                        }\r\n                        break;\r\n                }\r\n            })\r\n        });\r\n        updateFormData({ ...submittedData });\r\n        return invalidCount;\r\n    }\r\n\r\n    return (\r\n        <div className='card-wrapper boxShadow uxForm'>\r\n            <div className='card-head bold c-mb-0'>\r\n                <h5>{formHeading}</h5>\r\n            </div>\r\n            <div className='card-content'>\r\n                <form>\r\n                    {inputArray.length > 0 && inputArray.map((input, k) => (\r\n                        <Row key={k} className='c-mb-2'>\r\n                            {input.type === 'select' ?\r\n                                <Col md={12} sm={12}>\r\n                                    <UXSelect\r\n                                        key={k}\r\n                                        name={input.name}\r\n                                        id={input.name + k}\r\n                                        value={formData[input.name] ? formData[input.name].value : ''}\r\n                                        optionArray={input.optionArray}\r\n                                        onSelect={(e) => handleChange(e, input.validation.schema)}\r\n                                    />\r\n                                    {\r\n                                        formData[input.name] && formData[input.name].errorMsg.length > 0 ?\r\n                                            <span className='fDanger toLeft'>{formData[input.name].errorMsg[0]}</span>\r\n                                            : null\r\n                                    }\r\n                                </Col>\r\n                                :\r\n                                input.type === 'textArea' ?\r\n                                    <Col md={12} sm={12}>\r\n                                        <UXTextArea\r\n                                            key={k}\r\n                                            name={input.name}\r\n                                            rows={5}\r\n                                            id={input.name + k}\r\n                                            value={formData[input.name] ? formData[input.name].value : ''}\r\n                                            placeHolder={input.placeHolder ? input.placeHolder : input.name}\r\n                                            onEnter={(e) => handleChange(e, input.validation.schema)}\r\n                                        />\r\n                                        {\r\n                                            formData[input.name] && formData[input.name].errorMsg.length > 0 ?\r\n                                                <span className='fDanger toLeft'>{formData[input.name].errorMsg[0]}</span>\r\n                                                : null\r\n                                        }\r\n                                    </Col>\r\n                                    :\r\n                                    <Col md={12} sm={12}>\r\n                                        <UXTextBox\r\n                                            key={k}\r\n                                            name={input.name}\r\n                                            type={input.type}\r\n                                            id={input.name + k}\r\n                                            value={input.type !== 'file' ? formData[input.name] ? formData[input.name].value : '' : ''}\r\n                                            placeHolder={input.placeHolder ? input.placeHolder : input.name}\r\n                                            onEnter={(e) => handleChange(e, input.validation.schema)}\r\n                                        />\r\n                                        {\r\n                                            formData[input.name] && formData[input.name].errorMsg.length > 0 ?\r\n                                                <span className='fDanger toLeft'>{formData[input.name].errorMsg[0]}</span>\r\n                                                : null\r\n                                        }\r\n                                    </Col>\r\n\r\n                            }\r\n                        </Row>\r\n                    ))}\r\n\r\n                    <div className='c-mb-1 actionBlock'>\r\n                        <div className='actionLeft'></div>\r\n                        <div className='actionRight'>\r\n                            {controlArray.length > 0 && controlArray.map((control, k) => (\r\n                                control.type === 'button' || control.type === 'submit' ?\r\n                                    <div key={k} className='btnBlock'>\r\n                                        <UXButton\r\n                                            key={k}\r\n                                            class={`c-mb-1 btn adminDashboardBtn1 ${control.type === 'submit' ? 'btn-primary' : 'btn-danger'}`}\r\n                                            type='button'\r\n                                            value={control.name}\r\n                                            onTap={\r\n                                                control.type === 'submit' ?\r\n                                                    () => handleFormSubmit() : () => formReset()\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    : null\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nUXForm.propTypes = {\r\n    //String which will be set as form heading\r\n    formHeading: PropTypes.string.isRequired,\r\n\r\n    //array of object. First value should be filed name and second value should be input type\r\n    inputArray: PropTypes.array.isRequired,\r\n\r\n    //array of object. First value should be action name and second value should be action type       \r\n    controlArray: PropTypes.array.isRequired,\r\n\r\n    //function for submitting the form \r\n    onSubmit: PropTypes.func,\r\n\r\n    //function for reseting the form \r\n    onCancel: PropTypes.func\r\n};\r\n\r\nexport default UXForm;","import React, { useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport UXForm from '../../components/UX-Form/UXForm';\r\nimport UXLoader from '../../components/UX-Loader/UXLoader';\r\nimport './addItem.scss';\r\nimport data from './addItemMock.json';\r\nconst configData = data;\r\n\r\nconst AddItem = (props) => {\r\n    const [isLoading, setLoader] = useState(false);\r\n    const [successMsg, setSuccessMsg] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleSubmit = (itemData, submitType) => {\r\n        setLoader(true);\r\n        if (submitType === 'add') {\r\n            addNewProduct(itemData);\r\n        } else {\r\n            updateProduct(itemData);\r\n        }\r\n    }\r\n    const addNewProduct = (payload) => {\r\n        axios.post('https://fakestoreapi.com/products', payload).then(res => {\r\n            handleSuccess();\r\n        }).catch(err => {\r\n            handleErr(err);\r\n        }).finally(() => {\r\n            setLoader(false);\r\n        })\r\n    }\r\n    const updateProduct = (payload) => {\r\n        axios.put(`https://fakestoreapi.com/products/${props.iteminfo.id}`, payload).then(res => {\r\n            handleSuccess();\r\n        }).catch(err => {\r\n            handleErr(err);\r\n        }).finally(() => {\r\n            setLoader(false);\r\n        })\r\n    }\r\n    const handleSuccess = () => {\r\n        setSuccessMsg('Operation Successful');\r\n        setTimeout(() => {\r\n            setSuccessMsg(null);\r\n            props.onHide();\r\n        }, 2000);\r\n    }\r\n    const handleErr = (err) => {\r\n        setError(err.message);\r\n        setTimeout(() => {\r\n            setError(null);\r\n        }, 2000);\r\n    }\r\n    const resetFormData = () => {\r\n        props.onCancel();\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Add new item\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className='progressAction'>\r\n                        {\r\n                            isLoading ? <UXLoader />\r\n                                : successMsg ? <p id='successMsg'>{successMsg}</p>\r\n                                    : error ? <p id='errMsg'>{error}</p>\r\n                                        : null\r\n                        }\r\n                    </div>\r\n                    <UXForm\r\n                        id='addItemForm'\r\n                        formHeading='Please enter all the bellow details'\r\n                        inputArray={configData.addItemInputArray}\r\n                        controlArray={configData.controlArray}\r\n                        preFilledData={props.iteminfo && props.iteminfo}\r\n                        onSubmit={(formData) => handleSubmit(formData, props.mode)}\r\n                        onCancel={() => resetFormData()}\r\n                    >\r\n                    </UXForm>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(AddItem);","export default __webpack_public_path__ + \"static/media/ShopBridge.0342e28e.png\";","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport {FaUserAlt} from 'react-icons/fa';\r\nimport UXTable from '../../components/UX-Table/UXTable';\r\nimport UXButton from '../../components/UX-Button/UXButton';\r\nimport UXLoader from '../../components/UX-Loader/UXLoader';\r\nimport AddItem from '../addItemWidget/addItem';\r\nimport logo from '../../assets/Images/ShopBridge.png';\r\nimport './adminDashboard.scss';\r\nimport data from './adminDashboardMock.json';\r\nconst mockData = data.productData;\r\n\r\nconst AdminDashboard = () => {\r\n    const [modalshow, toogleModalShow] = useState(false);\r\n    const [operationType, setOperationType] = useState(null);\r\n    const [isLoading, setLoader] = useState(false);\r\n    const [productData, setProductData] = useState(null);\r\n    const [itemInfo, setItemInfo] = useState(null);\r\n    const [fetchErr, setFetchErr] = useState(null);\r\n    const [deleteStatus, setDelStatus] = useState(null);\r\n\r\n    const getProductData = () => {\r\n        setLoader(true);\r\n        axios.get('https://fakestoreapi.com/products').then(res => {\r\n            setProductData(res.data);\r\n        }).catch(err => {\r\n            setFetchErr(err.message);\r\n        }).finally(() => {\r\n            setLoader(false);\r\n        })\r\n    }\r\n    const deleteProduct = (productID) => {\r\n        axios.delete(`https://fakestoreapi.com/products/${productID}`).then(res => {\r\n            setDelStatus('Successfully Deleted');\r\n        }).catch(err => {\r\n            setDelStatus('error!!' + err.message);\r\n        }).finally(() => {\r\n            setTimeout(() => {\r\n                setDelStatus(null);\r\n                getProductData();\r\n            }, 2000)\r\n        })\r\n    }\r\n    const hideConfirm = () => {\r\n        setDelStatus(null);\r\n    }\r\n    const handleOpenModal = (type) => {\r\n        setOperationType(type);\r\n        toogleModalShow(true);\r\n    }\r\n    const handleEditItem = (itemData) => {\r\n        setItemInfo({ ...itemData });\r\n        handleOpenModal('edit');\r\n    }\r\n    const modalCancel = () => {\r\n        setItemInfo(null);\r\n        toogleModalShow(false);\r\n    }\r\n    const handleAddSuccess = () => {\r\n        getProductData();\r\n        modalCancel();\r\n    }\r\n    useEffect(() => {\r\n        getProductData();\r\n    }, []);\r\n    return (\r\n        <div className='mainWrapper'>\r\n            <div className='headerWrapper'>\r\n                <div className='logoSection'>\r\n                    <img className='logoImg' src={logo} alt='logo'></img>\r\n                </div>\r\n                <div className='textSection'>\r\n                    <p>Welcome, Admin &nbsp;&nbsp;<FaUserAlt /></p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='itemManageWrapper'>\r\n                <UXButton type='button' class='btn btn-primary' value='+ Add Item' onTap={() => handleOpenModal('add')}></UXButton>\r\n            </div>\r\n            <div className='tableWrapper'>\r\n                {\r\n                    isLoading ? <UXLoader /> :\r\n                        productData ?\r\n                            <UXTable\r\n                                tableHeader={mockData.tableHeader}\r\n                                tableBody={productData}\r\n                                onEdit={(itemData) => handleEditItem(itemData)}\r\n                                onDelete={(id) => deleteProduct(id)}\r\n                            ></UXTable>\r\n                            : fetchErr ? <p>{fetchErr}</p>\r\n                                : <h3>Sorry, No record found</h3>\r\n                }\r\n\r\n            </div>\r\n\r\n            <AddItem\r\n                show={modalshow}\r\n                mode={operationType}\r\n                iteminfo={itemInfo}\r\n                onHide={() => handleAddSuccess()}\r\n                onCancel={() => modalCancel()}\r\n            />\r\n\r\n            <SweetAlert show={deleteStatus ? true : false} onConfirm={() => hideConfirm()}>\r\n                {deleteStatus}\r\n            </SweetAlert>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <h1>\r\n                    404: Not Found\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NotFound;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport AdminDashboard from './widgets/adminDashboardWidget/adminDashboard';\nimport NotFound from './components/UX-NotFound/NotFound';\nimport './assets/CSS/UXCoreCSS.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"dashboardWrapper\">\n      <Switch>\n        <Route exact path='/product_admin_dashboard' component={props => <AdminDashboard {...props} />} />\n        <Route exact={true} path='*' component={() => <NotFound />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}